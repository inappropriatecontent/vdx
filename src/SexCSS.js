const cssJS = {
  Crimson: `body { font-family: serif; font-weight: bolder; background: black; color: lightsalmon; } div { text-align: center; display: block; clear: both; } body:not([style^="margin-left: 0"]) :where(.now, a) { white-space: nowrap; overflow: hidden; text-overflow: ellipsis; } .vh, #vhd { background: none; text-align: center; color: lightsalmon; font-family: sans-serif; font-size: small; font-weight: normal; text-transform: capitalize; } input.found:focus { background: black; color: palevioletred; } input.found { color: maroon; background: palevioletred; font-weight: bolder; } .seen:focus { background: saddlebrown; } .seen { color: saddlebrown; font-style: italic; font-weight: lighter; } input:focus { background: black; color: maroon; } input { font-weight: bold; font-family: serif; color: black; background: maroon; border: none; margin-left: 5px; text-transform: uppercase; clear: left; display: inline; } a.found:focus { font-weight: lighter; color: black; background: crimson; } a.found { color: crimson; font-weight: bolder; } a:focus { font-weight: lighter; color: black; background: maroon; } a { text-decoration: none; color: maroon; font-weight: bold; display: block; clear: left; }`,
  Pink: `body { font-family: sans-serif; font-weight: bolder; background: black; color: DeepPink; } div { text-align: center; display: block; clear: both; } body:not([style^="margin-left: 0"]) :where(.now, a) { white-space: nowrap; overflow: hidden; text-overflow: ellipsis; } .vh, #vhd { background: none; text-align: center; color: plum; font-size: small; font-family: serif; font-weight: normal; text-transform: capitalize; } input.found:focus { background: black; color: salmon; } input.found { color: DeepPink; background: salmon; font-weight: bolder; } .seen:focus { background: Plum; } .seen { color: Plum; font-style: italic; font-weight: lighter; } input:focus { background: black; color: DeepPink; } input { font-weight: bold; color: black; background: DeepPink; border: none; margin-left: 5px; text-transform: uppercase; clear: left; display: inline; } a.found:focus { font-weight: lighter; color: black; background: Salmon; } a.found { color: Salmon; font-weight: bolder; } a:focus { font-weight: lighter; color: black; background: DeepPink; } a { text-decoration: none; color: DeepPink; font-weight: bold; display: block; clear: left; }`,
  Blue: `body { font-family: sans-serif; font-weight: bolder; background: Navy; color: Moccasin; } div { text-align: center; display: block; clear: both; } body:not([style^="margin-left: 0"]) :where(.now, a) { white-space: nowrap; overflow: hidden; text-overflow: ellipsis; } .vh, #vhd { background: none; text-align: center; color: MintCream; font-family: monospace; font-size: small; font-weight: normal; text-transform: capitalize; } input.found:focus { background: Navy; color: salmon; } input.found { color: Moccasin; background: salmon; font-weight: bolder; } .seen:focus { background: MintCream; } .seen { color: MintCream; font-style: italic; font-weight: lighter; } input:focus { background: Navy; color: Moccasin; } input { font-weight: bold; color: Navy; background: Moccasin; border: none; margin-left: 5px; text-transform: uppercase; clear: left; display: inline; } a.found:focus { font-weight: lighter; color: Navy; background: MediumTurquoise; } a.found { color: MediumTurquoise; font-weight: bolder; } a:focus { font-weight: lighter; color: Navy; background: Moccasin; } a { text-decoration: none; color: Moccasin; font-weight: bold; display: block; clear: left; }`,
  Thistle: `body { font-family: "Arial", sans-serif; font-weight: bolder; background: black; color: blue; } div { text-align: center; display: block; clear: both; } body:not([style^="margin-left: 0"]) :where(.now, a) { white-space: nowrap; overflow: hidden; text-overflow: ellipsis; } .vh, #vhd { background: none; text-align: center; color: wheat; font-family: serif; font-weight: normal; text-transform: capitalize; } input.found:focus { background: black; color: violet; } input.found { color: thistle; background: violet; font-weight: bolder; } .seen:focus { background: wheat; } .seen { color: wheat; font-style: italic; font-weight: lighter; } input:focus { background: black; color: thistle; } input { font-weight: bold; color: black; background: thistle; border: none; margin-left: 5px; text-transform: uppercase; clear: left; display: inline; } a.found:focus { font-weight: lighter; color: black; background: darkgoldenrod; } a.found { color: darkgoldenrod; font-weight: bolder; } a:focus { font-weight: lighter; color: black; background: thistle; } a { text-decoration: none; color: thistle; font-weight: bold; display: block; clear: left; }`,
  Neon: `body { font-family: monospace; font-weight: bolder; background: black; color: blue; } div { text-align: center; display: block; clear: both; } body:not([style^="margin-left: 0"]) :where(.now, a) { white-space: nowrap; overflow: hidden; text-overflow: ellipsis; } .vh, #vhd { background: none; text-align: center; color: aquamarine; font-family: sans-serif; font-weight: bold; text-transform: capitalize; font-size: small; } input.found:focus { background: darksviolet; color: beige; } input.found { color: darkviolet; background: beige; font-weight: bolder; } .seen:focus { background: aquamarines; } .seen { color: aquamarine; font-style: italic; font-weight: lighter; } input:focus { background: darkviolet; color: springgreen; } input { font-weight: bold; color: darkviolet; background: springgreen; border: none; margin-left: 5px; text-transform: uppercase; clear: left; display: inline; font-family: monospace; } a.found:focus { font-weight: lighter; color: beige; background: springgreen; } a.found { color: beige; font-weight: bolder; } a:focus { font-weight: lighter; color: darkviolet; background: springgreen; } a { text-decoration: none; color: springgreen; font-weight: bold; display: block; clear: left; }`,
  Black: `body { font-family: sans-serif; font-weight: bolder; background: black; color: blue; } div { text-align: center; display: block; clear: both; } body:not([style^="margin-left: 0"]) :where(.now, a) { white-space: nowrap; overflow: hidden; text-overflow: ellipsis; } .vh, #vhd { background: none; text-align: center; color: slategrey; font-family: serif; font-weight: normal; text-transform: capitalize; } input.found:focus { background: black; color: salmon; } input.found { color: lightskyblue; background: salmon; font-weight: bolder; } .seen:focus { background: slategrey; } .seen { color: slategrey; font-style: italic; font-weight: lighter; } input:focus { background: black; color: lightskyblue; } input { font-weight: bold; color: black; background: lightskyblue; border: none; margin-left: 5px; text-transform: uppercase; clear: left; display: inline; } a.found:focus { font-weight: lighter; color: black; background: lightsalmon; } a.found { color: lightsalmon; font-weight: bolder; } a:focus { font-weight: lighter; color: black; background: lightskyblue; } a { text-decoration: none; color: lightskyblue; font-weight: bold; display: block; clear: left; }`
};
Object.setPrototypeOf(cssJS, {
  get theme() {
    let name = Object.keys(this).find(key=>cssJS[key] === document.getElementById('x').getInnerHTML());
    sessionStorage.css === name || sessionStorage.setItem('css', name);
    sessionStorage.setItem('css', name);

  },
  set theme(name) {
    document.getElementById('x').innerHTML = cssJS[name];
    sessionStorage.setItem('css', name);
    sessionStorage.setItem('css', name);
  },
  next: function() {
    let {theme} = this
      , keys = Object.keys(this);
    this.theme = keys[keys.indexOf(theme) + 1] || keys[0];
  },
  x: function() {
    let i = Array.from({
      length: 50
    }, ()=>parseInt(Math.random() * 6))
      , n = parseInt(Math.random() * 50);
    return this.theme = Object.keys(this).at(i[n]);
  }
});
